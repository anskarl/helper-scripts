#!/usr/bin/env bash

# Photo organizer script.
#
# The implemetation is inspired by https://jonblack.me/using-freenas-and-syncthing-to-automate-mobile-photo-organisation/

# --- -------------------------------------------------------------------------
# --- Required tools
# --- -------------------------------------------------------------------------
type exiftool >/dev/null 2>&1 || { echo >&2 "Program exiftool is not installed. Aborting."; exit 1; }
type sha1sum >/dev/null 2>&1 || { echo >&2 "Program sha1sum is not installed. Aborting."; exit 1; }
type parallel >/dev/null 2>&1 || { echo >&2 "Program parallel is not installed. Aborting."; exit 1; }

self=$(dirname $0)/$(basename ${0})

: ${LOG_LEVEL:="INFO"}

# load poor mans logger :)
. $(dirname $0)/poor.mans.logger.sh


# --- -------------------------------------------------------------------------
# --- Parameters with their default values
# --- -------------------------------------------------------------------------

: ${INPUT_DIR:="."}
: ${OUTPUT_DIR:="."}
: ${STAT:="/usr/bin/stat"}
: ${MODE:="copy"}

: ${PREFIX_DT_PATTERN:="%Y%m%d_%H%M%S"}
: ${PHOTO_FILES_PATTERN:="DSC_[0-9][0-9][0-9][0-9].NEF"}
: ${VIDEO_FILES_PATTERN:="DSC_[0-9][0-9][0-9][0-9].MOV"}

log_debug "param INPUT_DIR='${INPUT_DIR}'"
log_debug "param OUTPUT_DIR='${OUTPUT_DIR}'"
log_debug "param STAT='${STAT}'"
log_debug "param MODE='${MODE}'"
log_debug "param PREFIX_DT_PATTERN='${PREFIX_DT_PATTERN}'"
log_debug "param PHOTO_FILES_PATTERN='${PHOTO_FILES_PATTERN}'"
log_debug "param VIDEO_FILES_PATTERN='${VIDEO_FILES_PATTERN}'"
log_debug "param LOG_LEVEL='${LOG_LEVEL}'"

# --- -------------------------------------------------------------------------
# --- Utility functions
# --- -------------------------------------------------------------------------


phorg_logo(){
cat << EOF
       _               
   ___| |_ ___ ___ ___ 
  | . |   | . |  _| . |
  |  _|_|_|___|_| |_  |
  |_|             |___|

EOF
}

# reformat a line to fit into a max with of characters
#   arg 1: text to reformat
#   arg 2: maximum number of characters (width, default is 80 characters)
printFormatted() {
  txt=${1}

  if [[ -z ${2} ]]; then
    spaces=2
  else
    spaces=${2}
  fi

  width=$((80-${spaces}))
  prefix=$(printf "%${spaces}s")

  echo ${txt} | fold -s -w ${width} | sed -e "s/^/${prefix}/"
}

print_usage(){
    phorg_logo
    echo "Usage: $(basename ${0}) [-o PARAMETER=VALUE ...]"
    echo ""
    printFormatted "-h | --help : display this help."
    printFormatted "-o | --option : set an option in the form of PARAMETER=VALUE, for example to enable dry run set -o MODE=dry"
    echo ""
    echo "Parameters:"
    printFormatted "INPUT_DIR=<path> : Set the input path of files to organise (DEFAULT is current working path)"
    printFormatted "OUTPUT_DIR=<path> : Set the output path of organized files (DEFAULT is current working path)"
    printFormatted "STAT=<path> : Set the location of the 'stat' command (DEFAULT is '/usr/bin/stat')"
    printFormatted "MODE=<dry | move | copy>"
    printFormatted "- dry  : Dry run, does not apply any changes, it just prints logging messages"
    printFormatted "- move : Reorganize by moving files"
    printFormatted "- copy : Reorganize by copying files (DEFAULT)"
    printFormatted "PREFIX_DT_PATTERN=<date-time pattern>  : Date-time pattern to use as prefix of the resulting files (DEFAULT is '%Y%m%d_%H%M%S')"
    printFormatted "PHOTO_FILES_PATTERN=<filename pattern> : Filename pattern to match input photo files (DEFAULT is 'DSC_[0-9][0-9][0-9][0-9].NEF')"
    printFormatted "VIDEO_FILES_PATTERN=<filename pattern> : Filename pattern to match input video files (DEFAULT is 'DSC_[0-9][0-9][0-9][0-9].MOV')"
    printFormatted "LOG_LEVEL=<ALL | DEBUG | WARN | INFO | ERROR | OFF>: Specify the logging level (DEFAULT is ERROR)."

    echo ""
    echo "this script is located at: ${self}"
}


reorganize() {

    reorganize_mode=$1
    filename=$2
    c_date=$3
    c_fdt=$4

    c_date_y=$(echo "$c_date" | cut -d - -f 1)
    c_date_m=$(echo "$c_date" | cut -d - -f 2)

    target_path="$OUTPUT_DIR/$c_date_y/$c_date_m"

    if [[ ! -d "${target_path}" ]]; then
        if [ $reorganize_mode -ne 0 ]; then
            mkdir -p "${target_path}"
        fi
    fi
        
    # Add date/time to new filename to make files as unique as
    # possible. Cameras are rubbish at filenaming, and duplicates
    # are possible when multiple cameras are used.
    filename_base=$(basename "$filename");
    filename_raw="${filename_base%.*}";
    filename_ext="${filename_base##*.}";

    serial_no=$(exiftool  -SerialNumber ${filename} | cut -d : -f 2 | tr -d '[:space:]')
    if [[ ! -z "${serial_no}" ]]; then
        serial_no="-${serial_no}"
    fi
    sha1sum=$(sha1sum "${filename}" | cut -d ' ' -f 1)
    short_sha1sum=$(echo "${sha1sum}" | cut -c 1-10)
    

    new_filename="${c_fdt}${serial_no}-${short_sha1sum}-${filename_raw}.${filename_ext}"
    target_filepath="$OUTPUT_DIR/$c_date_y/$c_date_m/$new_filename"

    if [[ -f "${target_filepath}" ]]; then
        target_sha1sum=$(sha1sum "${target_filepath}" | cut -d ' ' -f 1)
        if [[ "${target_sha1sum}" == "${sha1sum}" ]]; then
            log_warn "File '${target_filepath}' already exists, skipping '${filename}'"
            return 0
        else
            unix_timestamp=$(date +%s)
            alt_new_filename="${c_fdt}${serial_no}-${short_sha1sum}-${unix_timestamp}-${filename_raw}.${filename_ext}"
            alt_target_filepath="$OUTPUT_DIR/$c_date_y/$c_date_m/$alt_new_filename"
            
            log_warn "File '${target_filepath}' already exists, but has different content, renaming to '${alt_target_filepath}'"
            target_filepath="${alt_target_filepath}"
        fi
    fi
    
    case ${reorganize_mode} in
        0)
            log_info "[DRY] Copying/Moving '${filename}' to '${target_filepath}'"
        ;;
        1)
            log_info "Moving '${filename}' to '${target_filepath}'"
            mv "$filename" "${target_filepath}"
        ;;
        2)
            log_info "Copying '${filename}' to '${target_filepath}'"
            cp "${filename}" "${target_filepath}"
        ;;
        *)
            log_info "Unknown mode '${reorganize_mode}'"
            exit 1
        ;;
    esac
}

process_video_file() {
    local c_filename="$1"
   
    log_info "Processing file '${c_filename}'"
    c_date=$($STAT -f %Sm -t %Y-%m "${c_filename}")
    c_date_exit_code=$?

    c_fdt=$($STAT -f %Sm -t ${PREFIX_DT_PATTERN} "${c_filename}")
    c_fdt_exit_code=$?

    exit_code=$([[ ${c_date_exit_code} -eq 0 && ${c_fdt_exit_code} -eq 0 ]] && echo 0 || echo 1)

    if [[ $exit_code -eq 0 ]]; then
        reorganize "$_mode" "$c_filename" "$c_date" "$c_fdt"
    else
        log_error "Error getting file date for '${c_filename}'"
        exit $exit_code
    fi
}

process_image_file() {
    local c_filename="$1"

    log_info "Processing file '${c_filename}'"
    # Get the creation date from the media format meta data. If not found,
    # use the file modified time.    
    c_date=$(exiftool "${c_filename}" -CreateDate -d "%Y-%m" | cut -d : -f 2 | tr -d '[:space:]')
    c_date_exit_code=$?

    c_fdt=$(exiftool "${c_filename}" -CreateDate -d "${PREFIX_DT_PATTERN}" | cut -d : -f 2 | tr -d '[:space:]')
    c_fdt_exit_code=$?

    

    if [[ "$c_date" == "0000" || "$c_date" == "" ]]; then
        # The arguments for stat are specific to FreeNAS and are not very
        # portable. This could break at any time. exiftool has
        # FileModifyDate, try that some time.
        c_date=$($STAT -f %Sm -t %Y-%m "${c_filename}")
        c_date_exit_code=$?

        c_fdt=$($STAT -f %Sm -t ${PREFIX_DT_PATTERN} "${c_filename}")
        c_fdt_exit_code=$?
    fi

    exit_code=$([[ ${c_date_exit_code} -eq 0 && ${c_fdt_exit_code} -eq 0 ]] && echo 0 || echo 1)

    if [[ $exit_code -eq 0 ]]; then
        reorganize "$_mode" "${c_filename}" "$c_date" "$c_fdt"
    else
        log_error "Error getting file date for '${c_filename}'"
        exit $exit_code
    fi
}


# --- -------------------------------------------------------------------------
# --- Main
# --- -------------------------------------------------------------------------

# Load configuration options from file '.photos_env'
if [[ -f ".photos_env" ]]; then
    log_info "Using settings from local '.photos_env' file"
    . $(dirname $0)/.photos_env
fi


# Parse arguments
single_file_logging=0
while [[ $# -gt 0 ]]
do
    key="${1}"
    case ${key} in

    -o|--option)
        eval "${2}"
        shift 2 # parse argument and value
        ;;

    -h|--help)
        print_usage
        exit 0
        ;;
    -F|--image-file)
        image_file="${2}"
        shift 2 # parse argument and value
        single_file_logging=1
    ;;
    -V|--video-file)
        video_file="${2}"
        shift 2 # parse argument and value
        single_file_logging=1
    ;;
    *)  # unknown option
        log_error "Error unknown argument '${1}'"
        exit 1
        ;;

    esac
done


# setup mode (0 = demo mode, 1 = move files and 2 = copy files)
_mode=0

case ${MODE} in
    dry)
        if [[ $single_file_logging -eq 0 ]]; then
            log_info "Dry run, will only print log messages!"
        fi
        _mode=0
    ;;
    move)
        log_info "Reorganize by moving files"
        _mode=1
    ;;
    copy)
        log_info "Reorganize by copying files"
        _mode=2
    ;;
    *)
        log_error "Unknown mode '${MODE}'"
        exit 1
    ;;
esac


if [[ ${image_file} != "" ]]; then
    log_debug "Processing single image file '${image_file}'"
    process_image_file "${image_file}"
elif [[ ${video_file} != "" ]]; then
    log_debug "Processing single video file '${video_file}'"
    process_video_file "${video_file}"
else
    phorg_logo
    log_debug "Processing all files in '${INPUT_DIR}'"

    log_info "Step 1/2: Re-organizing video files..."
    find ${INPUT_DIR} -type f -name "${VIDEO_FILES_PATTERN}" -print | \
        parallel --load 75% -j -1 --keep-order \
        ${self} --video-file {} -o MODE=${MODE} -o OUTPUT_DIR=${OUTPUT_DIR} -o STAT=${STAT} -o PREFIX_DT_PATTERN=${PREFIX_DT_PATTERN} -o PHOTO_FILES_PATTERN=${PHOTO_FILES_PATTERN} -o VIDEO_FILES_PATTERN=${VIDEO_FILES_PATTERN}


    log_info "Step 2/2: Re-organizing photo files..."
    find ${INPUT_DIR} -type f -name "${PHOTO_FILES_PATTERN}" -print | \
        parallel --load 75% -j -1 --keep-order \
        ${self} --image-file {} -o MODE=${MODE} -o OUTPUT_DIR=${OUTPUT_DIR} -o STAT=${STAT} -o PREFIX_DT_PATTERN=${PREFIX_DT_PATTERN} -o PHOTO_FILES_PATTERN=${PHOTO_FILES_PATTERN} -o VIDEO_FILES_PATTERN=${VIDEO_FILES_PATTERN}

fi